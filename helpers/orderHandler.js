import { v4 as uuidv4 } from 'uuid';
import { parseOrder, isSimilar } from './parseOrder.js';
import { readFileSync } from 'fs';
import path from 'path';

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
const employeesPath = path.join(__dirname, '../db/employees.json');
const employees = JSON.parse(readFileSync(employeesPath, 'utf8'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
function findMatchingSupplier(product, suppliers) {
  console.log('üîç –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:', product);
  
  const normalizedProduct = product.toLowerCase().trim();
  console.log('üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', normalizedProduct);
  
  for (const supplier of suppliers) {
    console.log('üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', supplier.name);
    for (const supplierProduct of supplier.products) {
      const normalizedSupplierProduct = supplierProduct.toLowerCase().trim();
      console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', normalizedSupplierProduct);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é isSimilar –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      if (isSimilar(normalizedProduct, normalizedSupplierProduct)) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫:', supplier.name);
        return supplier.name;
      }
    }
  }
  console.log('‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:', product);
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
async function handleOrder(message, client) {
    try {
        console.log('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', message.body);
        
        // –ü–∞—Ä—Å–∏–º –∑–∞–∫–∞–∑
        const orders = parseOrder(message.body);
        if (!orders || orders.length === 0) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–∫–∞–∑');
            await client.sendMessage(message.from, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        let orderText = 'üìã *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n\n';
        for (const order of orders) {
            orderText += `‚Ä¢ ${order.product} - ${order.quantity} ${order.unit}\n`;
            orderText += `  –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${order.supplier.name}\n\n`;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        await client.sendMessage(message.from, 
            '‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!*\n\n' + orderText
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        const ownerNumber = '77719119695';
        await client.sendMessage(ownerNumber, 
            'üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n' + orderText
        );
        
        console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', error);
        await client.sendMessage(message.from, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = {
    handleOrder
}; 