import pkg from '@whiskeysockets/baileys';
import { makeWASocket, fetchLatestBaileysVersion, DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys';
import { readFileSync } from 'fs';
import qrcode from 'qrcode-terminal';
import { handleOrder } from './helpers/orderHandler.js';
import { handleAdminCommand } from './helpers/adminHandler.js';
import { handleOrderCancellation, handleOrderEdit } from './helpers/orderManagement.js';
import { handleSupplierFeedback } from './helpers/supplierFeedback.js';
import crypto from 'crypto';
globalThis.crypto = crypto;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try {
  const suppliers = JSON.parse(readFileSync('./db/suppliers.json', 'utf-8'));
  const locations = JSON.parse(readFileSync('./db/locations.json', 'utf-8'));
  const ownerNumber = '77754723974@s.whatsapp.net';

  const sessions = {};
  const pendingOrders = {};
  const activeOrders = {};

  const startSock = async () => {
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
    try {
      const { state, saveCreds } = await useMultiFileAuthState('./sessions');
      const { version } = await fetchLatestBaileysVersion();

      const sock = makeWASocket({
        version,
        auth: state
      });

      sock.ev.on('creds.update', saveCreds);

      sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update;
        if (qr) {
          console.log('üì± –ù–æ–≤—ã–π QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
          qrcode.generate(qr, { small: true });
        }
        if (connection === 'close' && lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut) {
          console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhatsApp...');
          startSock();
        }
      });

      sock.ev.on('messages.upsert', async ({ messages }) => {
        try {
          const msg = messages[0];
          if (!msg.message || msg.key.fromMe) return;

          const from = msg.key.remoteJid;
          if (from.endsWith('@g.us')) {
            console.log(`üì® –ü—Ä–æ–ø—É—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${from}`);
            return;
          }

          const text = msg.message.conversation || msg.message.extendedTextMessage?.text;
          if (!text) return;

          console.log(`\nüì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}:`);
          console.log(`üìù –¢–µ–∫—Å—Ç: ${text}`);

          const isSupplier = Object.entries(suppliers).some(([_, data]) => data.phone + '@s.whatsapp.net' === from);

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          if (from === ownerNumber) {
            const handled = await handleAdminCommand(sock, from, text, pendingOrders, activeOrders, suppliers, ownerNumber);
            if (handled) return;
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
          const feedbackHandled = await handleSupplierFeedback(sock, from, text, activeOrders, suppliers, ownerNumber);
          if (feedbackHandled) return;

          if (isSupplier) return;

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
          const cancelled = await handleOrderCancellation(sock, from, text, activeOrders, pendingOrders, suppliers);
          if (cancelled) return;

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
          const edited = await handleOrderEdit(sock, from, text, activeOrders, pendingOrders, suppliers, ownerNumber);
          if (edited) return;

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
          if (!sessions[from]) {
            console.log(`üÜï –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è ${from}`);
            sessions[from] = { step: 1 };
            let locationMsg = `*üè¨ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ*

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:

1Ô∏è‚É£ *Bookish Cafe*
üìç –ø—Ä–æ—Å–ø. –ú–∞–Ω–≥–∏–ª–∏–∫ –ï–ª, 35/1

2Ô∏è‚É£ *Book Cafe*
üìç —É–ª. –ú–∞–∫—Å—É—Ç –ù–∞—Ä–∏–∫–±–∞–µ–≤–∞, 22

_–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2 –¥–ª—è –≤—ã–±–æ—Ä–∞_`;
            await sock.sendMessage(from, { text: locationMsg });
            return;
          }

          const session = sessions[from];
          console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ ${session.step} –¥–ª—è ${from}`);

          if (session.step === 1) {
            if (!locations[text]) {
              return await sock.sendMessage(from, { 
                text: `‚ùå *–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *1* –∏–ª–∏ *2* –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è.

1Ô∏è‚É£ Bookish Cafe
2Ô∏è‚É£ Book Cafe` 
              });
            }
            session.location = locations[text];
            
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const day = tomorrow.getDate().toString().padStart(2, '0');
            const month = (tomorrow.getMonth() + 1).toString().padStart(2, '0');
            session.datetime = `${day}.${month}`;
            
            session.step = 2;
            return await sock.sendMessage(from, { 
              text: `üõí *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑*

_–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ *–û–≥—É—Ä—Ü—ã 13 –∫–≥*
‚Ä¢ *–ü–æ–º–∏–¥–æ—Ä—ã 5 –∫–≥*
‚Ä¢ *–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å 10 –∫–≥*

‚ùóÔ∏è –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ "–∏"` 
            });
          }

          if (session.step === 2) {
            const { orderId, order } = await handleOrder(sock, from, text, session, suppliers, ownerNumber);
            if (orderId && order) {
              pendingOrders[orderId] = order;
              delete sessions[from];
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          await sock.sendMessage(from, { 
            text: `‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.` 
          });
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      setTimeout(startSock, 5000); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    }
  };

  console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');
  startSock();
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  process.exit(1);
}
